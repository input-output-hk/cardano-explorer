{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

module Explorer.Core.Schema where

import Data.ByteString.Char8 (ByteString)
import Data.Word (Word16, Word64)

import Database.Persist.TH (mkMigrate, mkPersist, onlyUniqueP, persistLowerCase, requireUniquesP, share, sqlSettings)


-- In the schema definition we need to match Haskell types with with the
-- custom type defined in PostgreSQL (via 'DOMAIN' statements). For the
-- time being the Haskell types will be simple Haskell types like
-- 'ByteString' and 'Word64'.

share [mkPersist sqlSettings, mkMigrate "migrateExplorerDB"] [persistLowerCase|

  -- Schema versioning has three stages to best allow handling of schema migrations.
  --    Stage 1: Set up PostgreSQL data types (using SQL 'DOMAIN' statements).
  --    Stage 2: Persistent generated migrations.
  --    Stage 3: Set up 'VIEW' tables (for use by other languages and applications).
  -- This table should have a single row.
  SchemaVersion
    stageOne Int
    stageTwo Int
    stageThree Int

  -- Each table has autogenerated primary key named 'id', the Haskell type
  -- of which is (for instance for this table) 'BlockId'. This specific
  -- primary key Haskell type can be used in a type-safe way in the rest
  -- of the schema definition.
  Block
    hash                ByteString      sqltype=hashtype
    epoch_no            Word64          sqltype=uinteger
    slot_no             Word64 Maybe    sqltype=uinteger
    block_no            Word64          sqltype=uinteger
    previous            BlockId Maybe   sqltype=hashtype
    merkel_root         ByteString      sqltype=hashtype
    size                Word64          sqltype=uinteger
    UniqueBlock         hash

  Tx
    hash                ByteString      sqltype=hashtype
    block               BlockId         -- This type is the primary key for the 'block' table.
    fee                 Word64          sqltype=lovelace

  Txout
    tx_id               TxId            -- This type is the primary key for the 'tx' table.
    index               Word16          sqltype=txindex
    address             ByteString      sqltype=hashtype
    value               Word64          sqltype=lovelace
    UniqueTxout         tx_id index     -- The (tx_id, index) pair must be unique.

  Txin
    tx_id               TxId            -- This type is the primary key for the 'tx' table.
    index               Word16          sqltype=txindex
    txout_id            TxoutId         -- This type is the primary key for the 'txout' table.
    UniqueTxin          tx_id index     -- The (tx_id, index) pair must be unique.

  |]

